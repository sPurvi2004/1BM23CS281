3a
#include <stdio.h>
#define MAX 5 
int queue[MAX];
int front = -1, rear =-1
void insert() {
    int item;
    if (rear == MAX - 1) {
        printf("Queue Overflow!\n");
        return;
    } 
    printf("Enter the element to insert: ");
    scanf("%d", &item);
    
    if (front == -1) {  
        front = 0;
    }
    rear++;
    queue[rear] = item;
    printf("Inserted %d\n", item);
}
void delete() {
    if (front == -1 || front > rear) {
        printf("Queue Underflow! (Queue is empty)\n");
        return;
    }
    printf("Deleted %d\n", queue[front]);
    front++;
    
    if (front > rear) {  
        front = rear = -1;
    }
}
void display() {
    if (front == -1) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements are: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}
int main() {
    int choice;
    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insert();
                break;
            case 2:
                delete();
                break;
            case 3:
                display();
                break;
            case 4:
                return 0;
            default:
                printf("Invalid choice! Please choose again.\n");
        }
    }
}
output
Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 1
Enter the element to insert: 10
Inserted 10

Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 1
Enter the element to insert: 20
Inserted 20

Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 3
Queue elements are: 10 20 

Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 2
Deleted 10

Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 2
Deleted 20

Queue Operations:
1. Insert
2. Delete
3. Display
4. Exit
Enter your choice: 2
Queue Underflow! (Queue is empty)

3b 
#include <stdio.h>
#define SIZE 5  
typedef struct {
    int items[SIZE];
    int front, rear;
} CircularQueue;
int isFull(CircularQueue *q) {
    return ((q->front == 0 && q->rear == SIZE - 1) || (q->rear == (q->front - 1) % (SIZE - 1))
}
int isEmpty(CircularQueue *q) {
    return (q->front == -1);
}
void enqueue(CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue Overflow: Cannot insert %d. The queue is full.\n", value);
    } else {
        if (q->front == -1) { // First insertion
            q->front = 0;
        }
        q->rear = (q->rear + 1) % SIZE;
        q->items[q->rear] = value;
        printf("Inserted %d into the queue.\n", value);
    }
}
void dequeue(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("Queue Underflow: Cannot delete, the queue is empty.\n");
    } else {
        printf("Deleted %d from the queue.\n", q->items[q->front]);
        if (q->front == q->rear) { // Only one element left
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % SIZE;
        }
    }
}
void display(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("The queue is empty.\n");
    } else {
        printf("Queue elements: ");
        int i = q->front;
        while (1) {
            printf("%d ", q->items[i]);
            if (i == q->rear) break;
            i = (i + 1) % SIZE;
        }
        printf("\n");
    }
}

int main() {
    CircularQueue q;
    q.front = q.rear = -1;  

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);  

    display(&q);

    dequeue(&q);
    display(&q);

    enqueue(&q, 60); 
    display(&q);

    return 0;
}
output
Inserted 10 into the queue.
Inserted 20 into the queue.
Inserted 30 into the queue.
Inserted 40 into the queue.
Inserted 50 into the queue.
Queue elements: 10 20 30 40 50 
Deleted 10 from the queue.
Queue elements: 20 30 40 50 
Inserted 60 into the queue.
Queue elements: 20 30 40 50 60 
