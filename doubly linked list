#include <stdio.h>
#include <stdlib.h>
 struct node {
    int data;
    struct node* next;
    struct node* prev;
} Node;

Node* head = NULL; 

// Function to create a doubly linked list
void create() {
    int n, data;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
        Node* newNode = (Node*)malloc(sizeof(Node));
        if (newNode == NULL) {
            printf("Memory allocation failed.\n");
            return;
        }

        printf("Enter data for node %d: ", i + 1);
        scanf("%d", &data);
        newNode->data = data;
        newNode->next = NULL;
        newNode->prev = NULL;

        if (head == NULL) {
            head = newNode; 
        } else {
            Node* temp = head;
            while (temp->next != NULL) {
                temp = temp->next; 
            }
            temp->next = newNode;
            newNode->prev = temp; 
        }
    }
}


void insertLeft(int value, int newData) {
    Node* temp = head;
    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }

    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    newNode->data = newData;
    newNode->next = temp;
    newNode->prev = temp->prev;

    if (temp->prev != NULL) {
        temp->prev->next = newNode;
    } else {
        head = newNode;
    }

    temp->prev = newNode;
    printf("Node with data %d inserted to the left of %d.\n", newData, value);
}

void deleteNode(int value) {
    Node* temp = head;
    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }

    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {
        head = temp->next;
    }

    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    free(temp); 
    printf("Node with value %d deleted.\n", value);
}


void display() {
    Node* temp = head;
    if (temp == NULL) {
        printf("The list is empty.\n");
        return;
    }

    printf("List contents: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}


void freeList() {
    Node* temp = head;
    while (temp != NULL) {
        Node* nextNode = temp->next;
        free(temp);
        temp = nextNode;
    }
    head = NULL; 
}

int main() {
    int choice, value, newData;
    
    while (1) {
        printf("\nDoubly Linked List Menu:\n");
        printf("1. Create list\n");
        printf("2. Insert to the left of a node\n");
        printf("3. Delete a node by value\n");
        printf("4. Display list\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                create(); 
                break;
            case 2:
                printf("Enter the value of the node to insert left of: ");
                scanf("%d", &value);
                printf("Enter the data for the new node: ");
                scanf("%d", &newData);
                insertLeft(value, newData); 
                break;
            case 3:
                printf("Enter the value of the node to delete: ");
                scanf("%d", &value);
                deleteNode(value); 
                break;
            case 4:
                display(); 
                break;
            case 5:
                freeList(); 
                printf("Exiting program.\n");
                return 0; 
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

output
Doubly Linked List Menu:
1. Create list
2. Insert to the left of a node
3. Delete a node by value
4. Display list
5. Exit
Enter your choice: 1
Enter the number of nodes: 4
Enter data for node 1: 2
Enter data for node 2: 4
Enter data for node 3: 6
Enter data for node 4: 8

Doubly Linked List Menu:
1. Create list
2. Insert to the left of a node
3. Delete a node by value
4. Display list
5. Exit
Enter your choice: 2
Enter the value of the node to insert left of: 4
Enter the data for the new node: 5
Node with data 5 inserted to the left of 4.

Doubly Linked List Menu:
1. Create list
2. Insert to the left of a node
3. Delete a node by value
4. Display list
5. Exit
Enter your choice: 4
List contents: 2 5 4 6 8 

Doubly Linked List Menu:
1. Create list
2. Insert to the left of a node
3. Delete a node by value
4. Display list
5. Exit
Enter your choice: 3
Enter the value of the node to delete: 5
Node with value 5 deleted.

Doubly Linked List Menu:
1. Create list
2. Insert to the left of a node
3. Delete a node by value
4. Display list
5. Exit
Enter your choice: 4
List contents: 2 4 6 8 
